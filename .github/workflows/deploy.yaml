name: CI/CD - FastAPI Build & Deploy

on:
  push:
    branches:
      - final

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Create .env from GitHub Secrets
        run: |
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_EXPIRATION_SECONDS=${{ secrets.JWT_EXPIRATION_SECONDS }}" >> .env
          echo "USERNAME_GITHUB=${{ secrets.USERNAME_GITHUB }}" >> .env
          echo "EMAIL_GIT=${{ secrets.EMAIL_GIT }}" >> .env
          echo "TOKEN_GITHUB=${{ secrets.TOKEN_GITHUB }}" >> .env

      - name: Validate .env variables
        run: |
          for var in POSTGRES_USER POSTGRES_PASSWORD POSTGRES_DB POSTGRES_PORT POSTGRES_HOST JWT_SECRET JWT_EXPIRATION_SECONDS USERNAME_GITHUB EMAIL_GIT TOKEN_GITHUB; do
            if ! grep -q "$var" .env; then
              echo "Missing $var in secrets!" && exit 1
            else
              echo "$var is set"
            fi
          done

      - name: Docker Compose Build & Run
        run: docker-compose up --build -d

      - name: Show container logs
        run: |
          echo "postgres-db logs:"
          docker logs postgres-db || echo "Unavailable"
          echo "backup logs:"
          docker logs backup || echo "Unavailable"
          echo "fastapi-backend logs:"
          docker logs fastapi-backend || echo "Unavailable"

      - name: Wait and Health Check
        run: |
          sleep 10
          docker ps
          curl --fail http://localhost:8000 || (echo "FastAPI failed to start" && exit 1)

  deploy:
    name: Deploy (Same Runner)
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Confirm Deployment Step
        run: echo "Build & Test succeeded. Deploy step can now push to server or registry."
